<?php
// $Id$

/**
 * @file
 * Adds support for sending and receiving VoIP requests to and from Tropo.
 */

module_load_include('inc', 'voiptropo', 'includes/voiptropo');
module_load_include('inc', 'voiptropo', 'includes/voiptroposerver');
//Include Tropo API
module_load_include('php', 'voiptropo', 'tropo_webapi/tropo.class');
//module_load_include('php', 'voiptropo', 'tropo_webapi/tropo-rest.class');


//-----------------------------------------------------------------------------
// Public functions
//-----------------------------------------------------------------------------

/**
 * Implementation of hook_voip_serverinfo().
 */
function voiptropo_voipserver_info() {
  $server = new voiptropoServer();
  return $server;
}

function voiptropo_admin_form($configuration) {
  $form['voiptropo_account_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Tropo Username'),
    '#description' => t("Your Tropo username."),
    '#default_value' => ($configuration['voiptropo_account_username']?$configuration['voiptropo_account_username']:''),
  );
  
  $form['voiptropo_account_password'] = array(
    '#type' => 'password',
    '#title' => t('Tropo Password'),
    '#description' => t("Your Tropo password."),
    '#default_value' => ($configuration['voiptropo_account_password']?$configuration['voiptropo_account_password']:''),
  );

  $form['voiptropo_voice_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Voice Outbound Token'),
    '#description' => t("The Voice Outbound Token provided in your Tropo application settings."),
    '#default_value' => ($configuration['voiptropo_voice_token']?$configuration['voiptropo_voice_token']:''),
  );
  
  $form['voiptropo_sms_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Messaging Outbound Token'),
    '#description' => t("The Messaging Outbound Token provided in your Tropo application settings."),
    '#default_value' => ($configuration['voiptropo_sms_token']?$configuration['voiptropo_sms_token']:''),
  );

  $form['voiptropo_voice_id'] = array(
    '#type' => 'select',
    '#title' => t('Default voice'),
    '#description' => t('Voice to be used in automatic text-to-speech generation.'),
    '#options' => VoipTropoServer::getVoicesList(),
    '#default_value' => $configuration['voiptropo_voice_id']?$configuration['voiptropo_voice_id']:'dave',
  );

  return $form;
}

/**
 * Validates the submission of the configuration form.
 */
function voiptropo_admin_form_validate($form, &$form_state) {

  // Send a test request to validate the configuration of the Tropo server
  $values = $form_state['values'];
  $result = VoipTropoServer::ping($values);

  if(voip_error()){
    form_set_error('', voip_error_message());
  }
}

/*
 * Implementation of hook_menu()
 */
function voiptropo_menu() {
  $items = array();

  $items['voip/tropo/callhandler'] = array(
    'title' => 'Voip Tropo call handler',
    'description' => 'Handles incoming calls from Tropo.',
      // Note: Since both incoming calls and Tropo responses are received
      // via the same callhandler menu, the specific call permissions are to 
      // be checked inside the call handler function itself.
    'access callback' => TRUE, 
    'page callback' => '_voiptropo_call_handler',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


